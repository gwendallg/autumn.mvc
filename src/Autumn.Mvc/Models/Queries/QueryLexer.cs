//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Autumn.Mvc.Models.Queries {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QueryLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, LETTER=17, 
		ANY=18;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "LETTER", 
		"ANY"
	};


	public QueryLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "','", "'='", "'<'", "'>'", "' '", "'!'", "'''", 
		"'\"'", "'-'", "'\\''", "'\\\"'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "LETTER", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QueryLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x14");
		sb.Append("M\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3");
		sb.Append("\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13");
		sb.Append("\x2\x2\x14\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15");
		sb.Append("\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\x3\x2");
		sb.Append("\x3\x4\x2\x43\\\x63|L\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2");
		sb.Append("\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2");
		sb.Append("\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2");
		sb.Append("\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2");
		sb.Append("\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2");
		sb.Append("!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x3\'\x3\x2\x2");
		sb.Append("\x2\x5)\x3\x2\x2\x2\a+\x3\x2\x2\x2\t-\x3\x2\x2\x2\v/\x3\x2\x2");
		sb.Append("\x2\r\x31\x3\x2\x2\x2\xF\x33\x3\x2\x2\x2\x11\x35\x3\x2\x2\x2");
		sb.Append("\x13\x37\x3\x2\x2\x2\x15\x39\x3\x2\x2\x2\x17;\x3\x2\x2\x2\x19");
		sb.Append("=\x3\x2\x2\x2\x1B?\x3\x2\x2\x2\x1D\x42\x3\x2\x2\x2\x1F\x45\x3");
		sb.Append("\x2\x2\x2!G\x3\x2\x2\x2#I\x3\x2\x2\x2%K\x3\x2\x2\x2\'(\a*\x2");
		sb.Append("\x2(\x4\x3\x2\x2\x2)*\a+\x2\x2*\x6\x3\x2\x2\x2+,\a=\x2\x2,\b");
		sb.Append("\x3\x2\x2\x2-.\a.\x2\x2.\n\x3\x2\x2\x2/\x30\a?\x2\x2\x30\f\x3");
		sb.Append("\x2\x2\x2\x31\x32\a>\x2\x2\x32\xE\x3\x2\x2\x2\x33\x34\a@\x2");
		sb.Append("\x2\x34\x10\x3\x2\x2\x2\x35\x36\a\"\x2\x2\x36\x12\x3\x2\x2\x2");
		sb.Append("\x37\x38\a#\x2\x2\x38\x14\x3\x2\x2\x2\x39:\a)\x2\x2:\x16\x3");
		sb.Append("\x2\x2\x2;<\a$\x2\x2<\x18\x3\x2\x2\x2=>\a/\x2\x2>\x1A\x3\x2");
		sb.Append("\x2\x2?@\a^\x2\x2@\x41\a)\x2\x2\x41\x1C\x3\x2\x2\x2\x42\x43");
		sb.Append("\a^\x2\x2\x43\x44\a$\x2\x2\x44\x1E\x3\x2\x2\x2\x45\x46\a}\x2");
		sb.Append("\x2\x46 \x3\x2\x2\x2GH\a\x7F\x2\x2H\"\x3\x2\x2\x2IJ\t\x2\x2");
		sb.Append("\x2J$\x3\x2\x2\x2KL\v\x2\x2\x2L&\x3\x2\x2\x2\x3\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace Autumn.Mvc.Models.Queries
