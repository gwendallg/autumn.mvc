//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Autumn.Mvc.Models.Queries {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, LETTER=15, ANY=16;
	public const int
		RULE_selector = 0, RULE_eval = 1, RULE_or = 2, RULE_and = 3, RULE_constraint = 4, 
		RULE_group = 5, RULE_comparison = 6, RULE_comparator = 7, RULE_comp_fiql = 8, 
		RULE_comp_alt = 9, RULE_reserved = 10, RULE_single_quote = 11, RULE_double_quote = 12, 
		RULE_arguments = 13, RULE_value = 14;
	public static readonly string[] ruleNames = {
		"selector", "eval", "or", "and", "constraint", "group", "comparison", 
		"comparator", "comp_fiql", "comp_alt", "reserved", "single_quote", "double_quote", 
		"arguments", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "','", "'='", "'<'", "'>'", "' '", "'!'", "'''", 
		"'\"'", "'-'", "'\\''", "'\\\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "LETTER", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public QueryParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 0, RULE_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << LETTER) | (1L << ANY))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalContext : ParserRuleContext {
		public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(QueryParser.Eof, 0); }
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 2, RULE_eval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; or();
			State = 36; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrContext : ParserRuleContext {
		public AndContext[] and() {
			return GetRuleContexts<AndContext>();
		}
		public AndContext and(int i) {
			return GetRuleContext<AndContext>(i);
		}
		public OrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrContext or() {
		OrContext _localctx = new OrContext(Context, State);
		EnterRule(_localctx, 4, RULE_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; and();
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 39; Match(T__3);
				State = 40; and();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndContext : ParserRuleContext {
		public ConstraintContext[] constraint() {
			return GetRuleContexts<ConstraintContext>();
		}
		public ConstraintContext constraint(int i) {
			return GetRuleContext<ConstraintContext>(i);
		}
		public AndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndContext and() {
		AndContext _localctx = new AndContext(Context, State);
		EnterRule(_localctx, 6, RULE_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; constraint();
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 47; Match(T__2);
				State = 48; constraint();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 8, RULE_constraint);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; group();
				}
				break;
			case T__11:
			case T__12:
			case T__13:
			case LETTER:
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 10, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(T__0);
			State = 59; or();
			State = 60; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 12, RULE_comparison);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; selector();
			State = 63; comparator();
			State = 64; arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		public Comp_fiqlContext comp_fiql() {
			return GetRuleContext<Comp_fiqlContext>(0);
		}
		public Comp_altContext comp_alt() {
			return GetRuleContext<Comp_altContext>(0);
		}
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterComparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitComparator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparator);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; comp_fiql();
				}
				break;
			case T__5:
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; comp_alt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_fiqlContext : ParserRuleContext {
		public ITerminalNode[] LETTER() { return GetTokens(QueryParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(QueryParser.LETTER, i);
		}
		public Comp_fiqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_fiql; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterComp_fiql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitComp_fiql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_fiql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_fiqlContext comp_fiql() {
		Comp_fiqlContext _localctx = new Comp_fiqlContext(Context, State);
		EnterRule(_localctx, 16, RULE_comp_fiql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11 || _la==LETTER) {
				{
				{
				State = 71;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==LETTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_altContext : ParserRuleContext {
		public Comp_altContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_alt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterComp_alt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitComp_alt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_alt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_altContext comp_alt() {
		Comp_altContext _localctx = new Comp_altContext(Context, State);
		EnterRule(_localctx, 18, RULE_comp_alt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 80; Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 20, RULE_reserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_quoteContext : ParserRuleContext {
		public Single_quoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_quote; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterSingle_quote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitSingle_quote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_quote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_quoteContext single_quote() {
		Single_quoteContext _localctx = new Single_quoteContext(Context, State);
		EnterRule(_localctx, 22, RULE_single_quote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__9);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << LETTER) | (1L << ANY))) != 0)) {
				{
				State = 88;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 86; Match(T__12);
					}
					break;
				case 2:
					{
					State = 87;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__9) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_quoteContext : ParserRuleContext {
		public Double_quoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_quote; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterDouble_quote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitDouble_quote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_quote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_quoteContext double_quote() {
		Double_quoteContext _localctx = new Double_quoteContext(Context, State);
		EnterRule(_localctx, 24, RULE_double_quote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(T__10);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << LETTER) | (1L << ANY))) != 0)) {
				{
				State = 98;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 96; Match(T__13);
					}
					break;
				case 2:
					{
					State = 97;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__10) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 26, RULE_arguments);
		int _la;
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(T__0);
				State = 106; value();
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 107; Match(T__3);
					State = 108; value();
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 114; Match(T__1);
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case LETTER:
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Single_quoteContext single_quote() {
			return GetRuleContext<Single_quoteContext>(0);
		}
		public Double_quoteContext double_quote() {
			return GetRuleContext<Double_quoteContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_value);
		int _la;
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__12:
			case T__13:
			case LETTER:
			case ANY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 119;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << LETTER) | (1L << ANY))) != 0) );
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; single_quote();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; double_quote();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x12");
		sb.Append("\x83\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x3\x2\x6\x2\"\n\x2\r");
		sb.Append("\x2\xE\x2#\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4,\n\x4\f");
		sb.Append("\x4\xE\x4/\v\x4\x3\x5\x3\x5\x3\x5\a\x5\x34\n\x5\f\x5\xE\x5\x37");
		sb.Append("\v\x5\x3\x6\x3\x6\x5\x6;\n\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b");
		sb.Append("\x3\b\x3\b\x3\t\x3\t\x5\tG\n\t\x3\n\x3\n\a\nK\n\n\f\n\xE\nN");
		sb.Append("\v\n\x3\n\x3\n\x3\v\x3\v\x5\vT\n\v\x3\f\x3\f\x3\r\x3\r\x3\r");
		sb.Append("\a\r[\n\r\f\r\xE\r^\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x65");
		sb.Append("\n\xE\f\xE\xE\xEh\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\a");
		sb.Append("\xFp\n\xF\f\xF\xE\xFs\v\xF\x3\xF\x3\xF\x3\xF\x5\xFx\n\xF\x3");
		sb.Append("\x10\x6\x10{\n\x10\r\x10\xE\x10|\x3\x10\x3\x10\x5\x10\x81\n");
		sb.Append("\x10\x3\x10\x2\x2\x11\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18");
		sb.Append("\x1A\x1C\x1E\x2\t\x3\x2\x3\r\x4\x2\a\a\v\v\x4\x2\xE\xE\x11\x11");
		sb.Append("\x3\x2\b\t\x3\x2\x3\v\x3\x2\f\f\x3\x2\r\r\x83\x2!\x3\x2\x2\x2");
		sb.Append("\x4%\x3\x2\x2\x2\x6(\x3\x2\x2\x2\b\x30\x3\x2\x2\x2\n:\x3\x2");
		sb.Append("\x2\x2\f<\x3\x2\x2\x2\xE@\x3\x2\x2\x2\x10\x46\x3\x2\x2\x2\x12");
		sb.Append("H\x3\x2\x2\x2\x14Q\x3\x2\x2\x2\x16U\x3\x2\x2\x2\x18W\x3\x2\x2");
		sb.Append("\x2\x1A\x61\x3\x2\x2\x2\x1Cw\x3\x2\x2\x2\x1E\x80\x3\x2\x2\x2");
		sb.Append(" \"\n\x2\x2\x2! \x3\x2\x2\x2\"#\x3\x2\x2\x2#!\x3\x2\x2\x2#$");
		sb.Append("\x3\x2\x2\x2$\x3\x3\x2\x2\x2%&\x5\x6\x4\x2&\'\a\x2\x2\x3\'\x5");
		sb.Append("\x3\x2\x2\x2(-\x5\b\x5\x2)*\a\x6\x2\x2*,\x5\b\x5\x2+)\x3\x2");
		sb.Append("\x2\x2,/\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2.\a\x3\x2\x2");
		sb.Append("\x2/-\x3\x2\x2\x2\x30\x35\x5\n\x6\x2\x31\x32\a\x5\x2\x2\x32");
		sb.Append("\x34\x5\n\x6\x2\x33\x31\x3\x2\x2\x2\x34\x37\x3\x2\x2\x2\x35");
		sb.Append("\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\t\x3\x2\x2\x2\x37\x35");
		sb.Append("\x3\x2\x2\x2\x38;\x5\f\a\x2\x39;\x5\xE\b\x2:\x38\x3\x2\x2\x2");
		sb.Append(":\x39\x3\x2\x2\x2;\v\x3\x2\x2\x2<=\a\x3\x2\x2=>\x5\x6\x4\x2");
		sb.Append(">?\a\x4\x2\x2?\r\x3\x2\x2\x2@\x41\x5\x2\x2\x2\x41\x42\x5\x10");
		sb.Append("\t\x2\x42\x43\x5\x1C\xF\x2\x43\xF\x3\x2\x2\x2\x44G\x5\x12\n");
		sb.Append("\x2\x45G\x5\x14\v\x2\x46\x44\x3\x2\x2\x2\x46\x45\x3\x2\x2\x2");
		sb.Append("G\x11\x3\x2\x2\x2HL\t\x3\x2\x2IK\t\x4\x2\x2JI\x3\x2\x2\x2KN");
		sb.Append("\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2MO\x3\x2\x2\x2NL\x3");
		sb.Append("\x2\x2\x2OP\a\a\x2\x2P\x13\x3\x2\x2\x2QS\t\x5\x2\x2RT\a\a\x2");
		sb.Append("\x2SR\x3\x2\x2\x2ST\x3\x2\x2\x2T\x15\x3\x2\x2\x2UV\t\x6\x2\x2");
		sb.Append("V\x17\x3\x2\x2\x2W\\\a\f\x2\x2X[\a\xF\x2\x2Y[\n\a\x2\x2ZX\x3");
		sb.Append("\x2\x2\x2ZY\x3\x2\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2");
		sb.Append("\x2\x2]_\x3\x2\x2\x2^\\\x3\x2\x2\x2_`\a\f\x2\x2`\x19\x3\x2\x2");
		sb.Append("\x2\x61\x66\a\r\x2\x2\x62\x65\a\x10\x2\x2\x63\x65\n\b\x2\x2");
		sb.Append("\x64\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66");
		sb.Append("\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3\x2\x2\x2h\x66\x3\x2\x2");
		sb.Append("\x2ij\a\r\x2\x2j\x1B\x3\x2\x2\x2kl\a\x3\x2\x2lq\x5\x1E\x10\x2");
		sb.Append("mn\a\x6\x2\x2np\x5\x1E\x10\x2om\x3\x2\x2\x2ps\x3\x2\x2\x2qo");
		sb.Append("\x3\x2\x2\x2qr\x3\x2\x2\x2rt\x3\x2\x2\x2sq\x3\x2\x2\x2tu\a\x4");
		sb.Append("\x2\x2ux\x3\x2\x2\x2vx\x5\x1E\x10\x2wk\x3\x2\x2\x2wv\x3\x2\x2");
		sb.Append("\x2x\x1D\x3\x2\x2\x2y{\n\x2\x2\x2zy\x3\x2\x2\x2{|\x3\x2\x2\x2");
		sb.Append("|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x81\x3\x2\x2\x2~\x81\x5\x18\r");
		sb.Append("\x2\x7F\x81\x5\x1A\xE\x2\x80z\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80");
		sb.Append("\x7F\x3\x2\x2\x2\x81\x1F\x3\x2\x2\x2\x11#-\x35:\x46LSZ\\\x64");
		sb.Append("\x66qw|\x80");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace Autumn.Mvc.Models.Queries
